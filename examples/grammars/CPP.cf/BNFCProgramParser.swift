// Generated by BNFC 2.9.6

import Lotsawa
import CitronLexerModule
import Foundation


struct Parser {
	let lexer: CitronLexer<Int16> = CitronLexer(rules: [
		CitronLexer.LexingRule.regexPattern("[A-Za-z]_|[0-9]|[A-Za-z]*", {_ in 29}),
		CitronLexer.LexingRule.regexPattern("#.*$", {_ in nil}),
		CitronLexer.LexingRule.regexPattern("//.*$", {_ in nil}),
		CitronLexer.LexingRule.regex(try! NSRegularExpression(pattern: "/*.*?*/", options: NSRegularExpression.Options.dotMatchesLineSeparators), {_ in nil}),
	])


	var grammar: DefaultGrammar = Grammar(recognizing: Symbol(id: 0))
	
	init() {
		grammar.addRule(lhs: Symbol(id: 0), rhs: [Symbol(id: 2)])
		grammar.addRule(lhs: Symbol(id: 1), rhs: [Symbol(id: 24), Symbol(id: 29), Symbol(id: 41), Symbol(id: 4), Symbol(id: 42), Symbol(id: 43), Symbol(id: 6), Symbol(id: 44)])
		grammar.addRule(lhs: Symbol(id: 2), rhs: [])
		grammar.addRule(lhs: Symbol(id: 2), rhs: [Symbol(id: 1), Symbol(id: 2)])
		grammar.addRule(lhs: Symbol(id: 3), rhs: [Symbol(id: 24), Symbol(id: 29)])
		grammar.addRule(lhs: Symbol(id: 4), rhs: [])
		grammar.addRule(lhs: Symbol(id: 4), rhs: [Symbol(id: 3)])
		grammar.addRule(lhs: Symbol(id: 4), rhs: [Symbol(id: 3), Symbol(id: 45), Symbol(id: 4)])
		grammar.addRule(lhs: Symbol(id: 5), rhs: [Symbol(id: 17), Symbol(id: 46)])
		grammar.addRule(lhs: Symbol(id: 5), rhs: [Symbol(id: 24), Symbol(id: 25), Symbol(id: 46)])
		grammar.addRule(lhs: Symbol(id: 5), rhs: [Symbol(id: 24), Symbol(id: 29), Symbol(id: 47), Symbol(id: 17), Symbol(id: 46)])
		grammar.addRule(lhs: Symbol(id: 5), rhs: [Symbol(id: 30), Symbol(id: 17), Symbol(id: 46)])
		grammar.addRule(lhs: Symbol(id: 5), rhs: [Symbol(id: 30), Symbol(id: 46)])
		grammar.addRule(lhs: Symbol(id: 5), rhs: [Symbol(id: 31), Symbol(id: 41), Symbol(id: 17), Symbol(id: 42), Symbol(id: 5)])
		grammar.addRule(lhs: Symbol(id: 5), rhs: [Symbol(id: 43), Symbol(id: 6), Symbol(id: 44)])
		grammar.addRule(lhs: Symbol(id: 5), rhs: [Symbol(id: 32), Symbol(id: 41), Symbol(id: 17), Symbol(id: 42), Symbol(id: 5), Symbol(id: 33), Symbol(id: 5)])
		grammar.addRule(lhs: Symbol(id: 6), rhs: [])
		grammar.addRule(lhs: Symbol(id: 6), rhs: [Symbol(id: 5), Symbol(id: 6)])
		grammar.addRule(lhs: Symbol(id: 7), rhs: [Symbol(id: 34)])
		grammar.addRule(lhs: Symbol(id: 7), rhs: [Symbol(id: 35)])
		grammar.addRule(lhs: Symbol(id: 7), rhs: [Symbol(id: 27)])
		grammar.addRule(lhs: Symbol(id: 7), rhs: [Symbol(id: 26)])
		grammar.addRule(lhs: Symbol(id: 7), rhs: [Symbol(id: 28)])
		grammar.addRule(lhs: Symbol(id: 7), rhs: [Symbol(id: 29)])
		grammar.addRule(lhs: Symbol(id: 7), rhs: [Symbol(id: 29), Symbol(id: 41), Symbol(id: 23), Symbol(id: 42)])
		grammar.addRule(lhs: Symbol(id: 8), rhs: [Symbol(id: 7), Symbol(id: 48)])
		grammar.addRule(lhs: Symbol(id: 8), rhs: [Symbol(id: 7), Symbol(id: 49)])
		grammar.addRule(lhs: Symbol(id: 9), rhs: [Symbol(id: 48), Symbol(id: 8)])
		grammar.addRule(lhs: Symbol(id: 9), rhs: [Symbol(id: 49), Symbol(id: 8)])
		grammar.addRule(lhs: Symbol(id: 10), rhs: [Symbol(id: 10), Symbol(id: 50), Symbol(id: 9)])
		grammar.addRule(lhs: Symbol(id: 10), rhs: [Symbol(id: 10), Symbol(id: 51), Symbol(id: 9)])
		grammar.addRule(lhs: Symbol(id: 11), rhs: [Symbol(id: 11), Symbol(id: 52), Symbol(id: 10)])
		grammar.addRule(lhs: Symbol(id: 11), rhs: [Symbol(id: 11), Symbol(id: 53), Symbol(id: 10)])
		grammar.addRule(lhs: Symbol(id: 12), rhs: [Symbol(id: 12), Symbol(id: 54), Symbol(id: 22)])
		grammar.addRule(lhs: Symbol(id: 12), rhs: [Symbol(id: 12), Symbol(id: 55), Symbol(id: 22)])
		grammar.addRule(lhs: Symbol(id: 12), rhs: [Symbol(id: 12), Symbol(id: 56), Symbol(id: 22)])
		grammar.addRule(lhs: Symbol(id: 12), rhs: [Symbol(id: 12), Symbol(id: 57), Symbol(id: 22)])
		grammar.addRule(lhs: Symbol(id: 13), rhs: [Symbol(id: 13), Symbol(id: 58), Symbol(id: 12)])
		grammar.addRule(lhs: Symbol(id: 13), rhs: [Symbol(id: 13), Symbol(id: 59), Symbol(id: 12)])
		grammar.addRule(lhs: Symbol(id: 14), rhs: [Symbol(id: 14), Symbol(id: 60), Symbol(id: 19)])
		grammar.addRule(lhs: Symbol(id: 15), rhs: [Symbol(id: 15), Symbol(id: 61), Symbol(id: 14)])
		grammar.addRule(lhs: Symbol(id: 16), rhs: [Symbol(id: 15), Symbol(id: 47), Symbol(id: 16)])
		grammar.addRule(lhs: Symbol(id: 7), rhs: [Symbol(id: 41), Symbol(id: 17), Symbol(id: -1), Symbol(id: 24), Symbol(id: 42)])
		grammar.addRule(lhs: Symbol(id: 17), rhs: [Symbol(id: 18)])
		grammar.addRule(lhs: Symbol(id: 18), rhs: [Symbol(id: 16)])
		grammar.addRule(lhs: Symbol(id: 16), rhs: [Symbol(id: 15)])
		grammar.addRule(lhs: Symbol(id: 15), rhs: [Symbol(id: 14)])
		grammar.addRule(lhs: Symbol(id: 14), rhs: [Symbol(id: 19)])
		grammar.addRule(lhs: Symbol(id: 19), rhs: [Symbol(id: 20)])
		grammar.addRule(lhs: Symbol(id: 20), rhs: [Symbol(id: 21)])
		grammar.addRule(lhs: Symbol(id: 21), rhs: [Symbol(id: 13)])
		grammar.addRule(lhs: Symbol(id: 13), rhs: [Symbol(id: 12)])
		grammar.addRule(lhs: Symbol(id: 12), rhs: [Symbol(id: 22)])
		grammar.addRule(lhs: Symbol(id: 22), rhs: [Symbol(id: 11)])
		grammar.addRule(lhs: Symbol(id: 11), rhs: [Symbol(id: 10)])
		grammar.addRule(lhs: Symbol(id: 10), rhs: [Symbol(id: 9)])
		grammar.addRule(lhs: Symbol(id: 9), rhs: [Symbol(id: 8)])
		grammar.addRule(lhs: Symbol(id: 8), rhs: [Symbol(id: 7)])
		grammar.addRule(lhs: Symbol(id: 7), rhs: [Symbol(id: 41), Symbol(id: 17), Symbol(id: 42)])
		grammar.addRule(lhs: Symbol(id: 23), rhs: [])
		grammar.addRule(lhs: Symbol(id: 23), rhs: [Symbol(id: 17)])
		grammar.addRule(lhs: Symbol(id: 23), rhs: [Symbol(id: 17), Symbol(id: 45), Symbol(id: 23)])
		grammar.addRule(lhs: Symbol(id: 24), rhs: [Symbol(id: 36)])
		grammar.addRule(lhs: Symbol(id: 24), rhs: [Symbol(id: 37)])
		grammar.addRule(lhs: Symbol(id: 24), rhs: [Symbol(id: 38)])
		grammar.addRule(lhs: Symbol(id: 24), rhs: [Symbol(id: 39)])
		grammar.addRule(lhs: Symbol(id: 24), rhs: [Symbol(id: 40)])
		grammar.addRule(lhs: Symbol(id: 25), rhs: [Symbol(id: 29)])
		grammar.addRule(lhs: Symbol(id: 25), rhs: [Symbol(id: 29), Symbol(id: 45), Symbol(id: 25)])
	
	}
	
	
	let cats: [Int : String] = [
		3 : "Arg",
		1 : "Def",
		17 : "Exp",
		0 : "Program",
		5 : "Stm",
		24 : "Type",
		26 : "Double",
		29 : "Id",
		27 : "Integer",
		28 : "String",
		4 : "[Arg]",
		2 : "[Def]",
		23 : "[Exp]",
		6 : "[Stm]",
		25 : "[Id]",
		18 : "Exp1",
		16 : "Exp2",
		15 : "Exp3",
		14 : "Exp4",
		19 : "Exp5",
		20 : "Exp6",
		21 : "Exp7",
		13 : "Exp8",
		12 : "Exp9",
		22 : "Exp10",
		11 : "Exp11",
		10 : "Exp12",
		9 : "Exp13",
		8 : "Exp14",
		7 : "Exp15",
	]
	
	let terminals: [Int : String] = [
		59 : "!=",
		60 : "&&",
		41 : "(",
		42 : ")",
		50 : "*",
		52 : "+",
		48 : "++",
		45 : ",",
		53 : "-",
		49 : "--",
		51 : "/",
		46 : ";",
		54 : "<",
		56 : "<=",
		47 : "=",
		58 : "==",
		55 : ">",
		57 : ">=",
		36 : "bool",
		38 : "double",
		33 : "else",
		35 : "false",
		32 : "if",
		37 : "int",
		30 : "return",
		40 : "string",
		34 : "true",
		39 : "void",
		31 : "while",
		43 : "{",
		61 : "||",
		44 : "}",
	]


	public func runProgramParser(input: String) throws -> Forest<Int16> {
		var recognizer: Recognizer<Int16> = Recognizer(PreprocessedGrammar(grammar))
		var tokens: [Int16] = []
		try lexer.tokenize(input, onFound: {(token) in tokens.append(token)})
		for (i,s) in tokens.enumerated() {
			recognizer.discover(Symbol(id: s), startingAt: UInt32(i))
		}
		return recognizer.forest
	}

}
