// Generated by BNFC 2.9.6

import Lotsawa
import CitronLexerModule
import Foundation


struct Parser {
	let lexer: CitronLexer<Int16> = CitronLexer(rules: [
	])


	var grammar: DefaultGrammar = Grammar(recognizing: Symbol(id: 0))
	
	init() {
		grammar.addRule(lhs: Symbol(id: 0), rhs: [Symbol(id: 37), Symbol(id: 32), Symbol(id: 2), Symbol(id: 9)])
		grammar.addRule(lhs: Symbol(id: 1), rhs: [Symbol(id: 38), Symbol(id: 31), Symbol(id: 22), Symbol(id: 39), Symbol(id: 40), Symbol(id: 7), Symbol(id: 41)])
		grammar.addRule(lhs: Symbol(id: 1), rhs: [Symbol(id: 42), Symbol(id: 31), Symbol(id: 22), Symbol(id: 3)])
		grammar.addRule(lhs: Symbol(id: 2), rhs: [])
		grammar.addRule(lhs: Symbol(id: 2), rhs: [Symbol(id: 1), Symbol(id: 43), Symbol(id: 2)])
		grammar.addRule(lhs: Symbol(id: 3), rhs: [Symbol(id: 39), Symbol(id: 27)])
		grammar.addRule(lhs: Symbol(id: 3), rhs: [])
		grammar.addRule(lhs: Symbol(id: 4), rhs: [Symbol(id: 31), Symbol(id: 24), Symbol(id: 5)])
		grammar.addRule(lhs: Symbol(id: 5), rhs: [])
		grammar.addRule(lhs: Symbol(id: 5), rhs: [Symbol(id: 6), Symbol(id: 5)])
		grammar.addRule(lhs: Symbol(id: 6), rhs: [Symbol(id: 25)])
		grammar.addRule(lhs: Symbol(id: 7), rhs: [Symbol(id: 4)])
		grammar.addRule(lhs: Symbol(id: 7), rhs: [Symbol(id: 4), Symbol(id: 43), Symbol(id: 7)])
		grammar.addRule(lhs: Symbol(id: 8), rhs: [Symbol(id: 44), Symbol(id: 40), Symbol(id: 11), Symbol(id: 41)])
		grammar.addRule(lhs: Symbol(id: 8), rhs: [Symbol(id: 10)])
		grammar.addRule(lhs: Symbol(id: 9), rhs: [])
		grammar.addRule(lhs: Symbol(id: 9), rhs: [Symbol(id: 8), Symbol(id: 43), Symbol(id: 9)])
		grammar.addRule(lhs: Symbol(id: 10), rhs: [Symbol(id: 31), Symbol(id: 45), Symbol(id: 27), Symbol(id: 39), Symbol(id: 14)])
		grammar.addRule(lhs: Symbol(id: 10), rhs: [Symbol(id: 32), Symbol(id: 45), Symbol(id: 27), Symbol(id: 39), Symbol(id: 14)])
		grammar.addRule(lhs: Symbol(id: 11), rhs: [Symbol(id: 10)])
		grammar.addRule(lhs: Symbol(id: 11), rhs: [Symbol(id: 10), Symbol(id: 43), Symbol(id: 11)])
		grammar.addRule(lhs: Symbol(id: 12), rhs: [Symbol(id: 32)])
		grammar.addRule(lhs: Symbol(id: 12), rhs: [Symbol(id: 31)])
		grammar.addRule(lhs: Symbol(id: 12), rhs: [Symbol(id: 30)])
		grammar.addRule(lhs: Symbol(id: 13), rhs: [Symbol(id: 13), Symbol(id: 12)])
		grammar.addRule(lhs: Symbol(id: 13), rhs: [Symbol(id: 13), Symbol(id: 46), Symbol(id: 25)])
		grammar.addRule(lhs: Symbol(id: 14), rhs: [Symbol(id: 47), Symbol(id: 16), Symbol(id: 48), Symbol(id: 14)])
		grammar.addRule(lhs: Symbol(id: 14), rhs: [Symbol(id: 49), Symbol(id: 8), Symbol(id: 50), Symbol(id: 14)])
		grammar.addRule(lhs: Symbol(id: 14), rhs: [Symbol(id: 51), Symbol(id: 12), Symbol(id: 52), Symbol(id: 19), Symbol(id: 40), Symbol(id: 18), Symbol(id: 41)])
		grammar.addRule(lhs: Symbol(id: 14), rhs: [Symbol(id: 53), Symbol(id: 25), Symbol(id: 14)])
		grammar.addRule(lhs: Symbol(id: 14), rhs: [Symbol(id: 54), Symbol(id: 36), Symbol(id: 14)])
		grammar.addRule(lhs: Symbol(id: 14), rhs: [Symbol(id: 55), Symbol(id: 36), Symbol(id: 27)])
		grammar.addRule(lhs: Symbol(id: 14), rhs: [Symbol(id: 13)])
		grammar.addRule(lhs: Symbol(id: 13), rhs: [Symbol(id: 12)])
		grammar.addRule(lhs: Symbol(id: 12), rhs: [Symbol(id: 56), Symbol(id: 14), Symbol(id: 57)])
		grammar.addRule(lhs: Symbol(id: 15), rhs: [Symbol(id: 19)])
		grammar.addRule(lhs: Symbol(id: 15), rhs: [Symbol(id: 46), Symbol(id: 21)])
		grammar.addRule(lhs: Symbol(id: 16), rhs: [Symbol(id: 15)])
		grammar.addRule(lhs: Symbol(id: 16), rhs: [Symbol(id: 15), Symbol(id: 16)])
		grammar.addRule(lhs: Symbol(id: 17), rhs: [Symbol(id: 31), Symbol(id: 24), Symbol(id: 20), Symbol(id: 48), Symbol(id: 14)])
		grammar.addRule(lhs: Symbol(id: 17), rhs: [Symbol(id: 30), Symbol(id: 48), Symbol(id: 14)])
		grammar.addRule(lhs: Symbol(id: 17), rhs: [Symbol(id: 58), Symbol(id: 48), Symbol(id: 14)])
		grammar.addRule(lhs: Symbol(id: 18), rhs: [Symbol(id: 17)])
		grammar.addRule(lhs: Symbol(id: 18), rhs: [Symbol(id: 17), Symbol(id: 43), Symbol(id: 18)])
		grammar.addRule(lhs: Symbol(id: 19), rhs: [Symbol(id: 56), Symbol(id: 32), Symbol(id: 45), Symbol(id: 27), Symbol(id: 57)])
		grammar.addRule(lhs: Symbol(id: 20), rhs: [])
		grammar.addRule(lhs: Symbol(id: 20), rhs: [Symbol(id: 19), Symbol(id: 20)])
		grammar.addRule(lhs: Symbol(id: 21), rhs: [Symbol(id: 56), Symbol(id: 32), Symbol(id: 45), Symbol(id: 28), Symbol(id: 57)])
		grammar.addRule(lhs: Symbol(id: 21), rhs: [Symbol(id: 32)])
		grammar.addRule(lhs: Symbol(id: 22), rhs: [])
		grammar.addRule(lhs: Symbol(id: 22), rhs: [Symbol(id: 21), Symbol(id: 22)])
		grammar.addRule(lhs: Symbol(id: 23), rhs: [Symbol(id: 46), Symbol(id: 21)])
		grammar.addRule(lhs: Symbol(id: 24), rhs: [])
		grammar.addRule(lhs: Symbol(id: 24), rhs: [Symbol(id: 23), Symbol(id: 24)])
		grammar.addRule(lhs: Symbol(id: 25), rhs: [Symbol(id: 32)])
		grammar.addRule(lhs: Symbol(id: 25), rhs: [Symbol(id: 31)])
		grammar.addRule(lhs: Symbol(id: 26), rhs: [Symbol(id: 26), Symbol(id: 25)])
		grammar.addRule(lhs: Symbol(id: 27), rhs: [Symbol(id: 26), Symbol(id: 48), Symbol(id: 27)])
		grammar.addRule(lhs: Symbol(id: 27), rhs: [Symbol(id: 59), Symbol(id: 22), Symbol(id: 60), Symbol(id: 27)])
		grammar.addRule(lhs: Symbol(id: 27), rhs: [Symbol(id: 26)])
		grammar.addRule(lhs: Symbol(id: 26), rhs: [Symbol(id: 25)])
		grammar.addRule(lhs: Symbol(id: 25), rhs: [Symbol(id: 56), Symbol(id: 27), Symbol(id: 57)])
		grammar.addRule(lhs: Symbol(id: 28), rhs: [Symbol(id: 61)])
		grammar.addRule(lhs: Symbol(id: 28), rhs: [Symbol(id: 62)])
		grammar.addRule(lhs: Symbol(id: 28), rhs: [Symbol(id: 63)])
		grammar.addRule(lhs: Symbol(id: 29), rhs: [Symbol(id: 28), Symbol(id: 48), Symbol(id: 29)])
		grammar.addRule(lhs: Symbol(id: 29), rhs: [Symbol(id: 28)])
		grammar.addRule(lhs: Symbol(id: 28), rhs: [Symbol(id: 56), Symbol(id: 29), Symbol(id: 57)])
		grammar.addRule(lhs: Symbol(id: 30), rhs: [Symbol(id: 56), Symbol(id: 35), Symbol(id: 45), Symbol(id: 25), Symbol(id: 57)])
		grammar.addRule(lhs: Symbol(id: 30), rhs: [Symbol(id: 56), Symbol(id: 34), Symbol(id: 45), Symbol(id: 25), Symbol(id: 57)])
		grammar.addRule(lhs: Symbol(id: 30), rhs: [Symbol(id: 56), Symbol(id: 33), Symbol(id: 45), Symbol(id: 25), Symbol(id: 57)])
		grammar.addRule(lhs: Symbol(id: 30), rhs: [Symbol(id: 56), Symbol(id: 36), Symbol(id: 45), Symbol(id: 25), Symbol(id: 57)])
		grammar.addRule(lhs: Symbol(id: 31), rhs: [Symbol(id: 32), Symbol(id: 60), Symbol(id: 32)])
	
	}
	
	
	let cats: [Int : String] = [
		23 : "ATbind",
		17 : "Alt",
		15 : "Bind",
		4 : "Cdef",
		14 : "Exp",
		29 : "Kind",
		30 : "Lit",
		3 : "MaybeTy",
		0 : "Module",
		31 : "QualIdent",
		21 : "Tbind",
		1 : "Tdef",
		27 : "Ty",
		6 : "Tyt",
		19 : "Vbind",
		10 : "Vdef",
		8 : "Vdefg",
		33 : "Char",
		34 : "Double",
		32 : "Ident",
		35 : "Integer",
		36 : "String",
		24 : "[ATbind]",
		18 : "[Alt]",
		16 : "[Bind]",
		7 : "[Cdef]",
		22 : "[Tbind]",
		2 : "[Tdef]",
		5 : "[Tyt]",
		20 : "[Vbind]",
		11 : "[Vdef]",
		9 : "[Vdefg]",
		13 : "Exp1",
		12 : "Exp2",
		28 : "Kind1",
		26 : "Ty1",
		25 : "Ty2",
	]
	
	let terminals: [Int : String] = [
		62 : "#",
		58 : "%_",
		51 : "%case",
		53 : "%coerce",
		38 : "%data",
		55 : "%external",
		59 : "%forall",
		50 : "%in",
		49 : "%let",
		37 : "%module",
		42 : "%newtype",
		54 : "%note",
		52 : "%of",
		44 : "%rec",
		56 : "(",
		57 : ")",
		61 : "*",
		48 : "->",
		60 : ".",
		45 : "::",
		43 : ";",
		39 : "=",
		63 : "?",
		46 : "@",
		47 : "\\",
		40 : "{",
		41 : "}",
	]


	public func runModuleParser(input: String) throws -> Forest<Int16> {
		var recognizer: Recognizer<Int16> = Recognizer(PreprocessedGrammar(grammar))
		var tokens: [Int16] = []
		try lexer.tokenize(input, onFound: {(token) in tokens.append(token)})
		for (i,s) in tokens.enumerated() {
			recognizer.discover(Symbol(id: s), startingAt: UInt32(i))
		}
		return recognizer.forest
	}

}
