// Generated by BNFC 2.9.6

import Lotsawa
import CitronLexerModule
import Foundation


struct Parser {
	let lexer: CitronLexer<Int16> = CitronLexer(rules: [
		CitronLexer.LexingRule.regexPattern("//.*$", {_ in nil}),
		CitronLexer.LexingRule.regex(try! NSRegularExpression(pattern: "/*.*?*/", options: NSRegularExpression.Options.dotMatchesLineSeparators), {_ in nil}),
	])


	var grammar: DefaultGrammar = Grammar(recognizing: Symbol(id: 0))
	
	init() {
		grammar.addRule(lhs: Symbol(id: 0), rhs: [Symbol(id: 7), Symbol(id: 8), Symbol(id: 14), Symbol(id: 15), Symbol(id: 16), Symbol(id: 6), Symbol(id: 17)])
		grammar.addRule(lhs: Symbol(id: 1), rhs: [Symbol(id: 7), Symbol(id: 8), Symbol(id: 18)])
		grammar.addRule(lhs: Symbol(id: 1), rhs: [Symbol(id: 8), Symbol(id: 19), Symbol(id: 2), Symbol(id: 18)])
		grammar.addRule(lhs: Symbol(id: 1), rhs: [Symbol(id: 8), Symbol(id: 20), Symbol(id: 18)])
		grammar.addRule(lhs: Symbol(id: 1), rhs: [Symbol(id: 11), Symbol(id: 14), Symbol(id: 2), Symbol(id: 15), Symbol(id: 16), Symbol(id: 6), Symbol(id: 17)])
		grammar.addRule(lhs: Symbol(id: 2), rhs: [Symbol(id: 3), Symbol(id: 21), Symbol(id: 3)])
		grammar.addRule(lhs: Symbol(id: 3), rhs: [Symbol(id: 3), Symbol(id: 22), Symbol(id: 4)])
		grammar.addRule(lhs: Symbol(id: 4), rhs: [Symbol(id: 4), Symbol(id: 23), Symbol(id: 5)])
		grammar.addRule(lhs: Symbol(id: 5), rhs: [Symbol(id: 8)])
		grammar.addRule(lhs: Symbol(id: 5), rhs: [Symbol(id: 10)])
		grammar.addRule(lhs: Symbol(id: 5), rhs: [Symbol(id: 9)])
		grammar.addRule(lhs: Symbol(id: 6), rhs: [])
		grammar.addRule(lhs: Symbol(id: 6), rhs: [Symbol(id: 1), Symbol(id: 6)])
		grammar.addRule(lhs: Symbol(id: 1), rhs: [Symbol(id: 1), Symbol(id: 18)])
		grammar.addRule(lhs: Symbol(id: 2), rhs: [Symbol(id: 3)])
		grammar.addRule(lhs: Symbol(id: 3), rhs: [Symbol(id: 4)])
		grammar.addRule(lhs: Symbol(id: 4), rhs: [Symbol(id: 5)])
		grammar.addRule(lhs: Symbol(id: 5), rhs: [Symbol(id: 14), Symbol(id: 2), Symbol(id: 15)])
		grammar.addRule(lhs: Symbol(id: 7), rhs: [Symbol(id: 12)])
		grammar.addRule(lhs: Symbol(id: 7), rhs: [Symbol(id: 13)])
		grammar.addRule(lhs: Symbol(id: 2), rhs: [Symbol(id: 7), Symbol(id: 14), Symbol(id: 2), Symbol(id: 15)])
	
	}
	
	
	let cats: [Int : String] = [
		2 : "Exp",
		0 : "Prog",
		1 : "Stm",
		7 : "Typ",
		9 : "Double",
		8 : "Ident",
		10 : "Integer",
		6 : "[Stm]",
		3 : "Exp1",
		4 : "Exp2",
		5 : "Exp3",
	]
	
	let terminals: [Int : String] = [
		14 : "(",
		15 : ")",
		23 : "*",
		22 : "+",
		20 : "++",
		18 : ";",
		21 : "<",
		19 : "=",
		13 : "double",
		12 : "int",
		11 : "while",
		16 : "{",
		17 : "}",
	]


	public func runProgParser(input: String) throws -> Forest<Int16> {
		var recognizer: Recognizer<Int16> = Recognizer(PreprocessedGrammar(grammar))
		var tokens: [Int16] = []
		try lexer.tokenize(input, onFound: {(token) in tokens.append(token)})
		for (i,s) in tokens.enumerated() {
			recognizer.discover(Symbol(id: s), startingAt: UInt32(i))
		}
		return recognizer.forest
	}

}
