// Generated by BNFC 2.9.6

import Lotsawa
import CitronLexerModule
import Foundation


struct Parser {
	let lexer: CitronLexer<Int16> = CitronLexer(rules: [
		CitronLexer.LexingRule.regexPattern("_|[A-Za-z]['_]|[0-9]|[A-Za-z]*|![0-9]*", {_ in 31}),
		CitronLexer.LexingRule.regexPattern("/\", {_ in 32}),
		CitronLexer.LexingRule.regexPattern("?", {_ in 33}),
		CitronLexer.LexingRule.regexPattern("--.*$", {_ in nil}),
		CitronLexer.LexingRule.regex(try! NSRegularExpression(pattern: "{-.*?-}", options: NSRegularExpression.Options.dotMatchesLineSeparators), {_ in nil}),
	])


	var grammar: DefaultGrammar = Grammar(recognizing: Symbol(id: 0))
	
	init() {
		grammar.addRule(lhs: Symbol(id: 0), rhs: [Symbol(id: 34), Symbol(id: 31), Symbol(id: 35), Symbol(id: 60), Symbol(id: 2), Symbol(id: 4), Symbol(id: 61)])
		grammar.addRule(lhs: Symbol(id: 1), rhs: [Symbol(id: 36), Symbol(id: 31)])
		grammar.addRule(lhs: Symbol(id: 2), rhs: [])
		grammar.addRule(lhs: Symbol(id: 2), rhs: [Symbol(id: 1)])
		grammar.addRule(lhs: Symbol(id: 2), rhs: [Symbol(id: 1), Symbol(id: 62), Symbol(id: 2)])
		grammar.addRule(lhs: Symbol(id: 3), rhs: [Symbol(id: 31), Symbol(id: 27), Symbol(id: 63), Symbol(id: 6), Symbol(id: 64), Symbol(id: 5)])
		grammar.addRule(lhs: Symbol(id: 3), rhs: [Symbol(id: 37), Symbol(id: 31), Symbol(id: 27), Symbol(id: 64), Symbol(id: 25)])
		grammar.addRule(lhs: Symbol(id: 3), rhs: [Symbol(id: 38), Symbol(id: 31), Symbol(id: 27), Symbol(id: 64), Symbol(id: 25)])
		grammar.addRule(lhs: Symbol(id: 3), rhs: [Symbol(id: 31), Symbol(id: 27), Symbol(id: 63), Symbol(id: 6), Symbol(id: 64), Symbol(id: 39), Symbol(id: 60), Symbol(id: 23), Symbol(id: 61)])
		grammar.addRule(lhs: Symbol(id: 3), rhs: [Symbol(id: 31), Symbol(id: 27), Symbol(id: 63), Symbol(id: 6), Symbol(id: 64), Symbol(id: 40)])
		grammar.addRule(lhs: Symbol(id: 3), rhs: [Symbol(id: 41), Symbol(id: 60), Symbol(id: 4), Symbol(id: 61)])
		grammar.addRule(lhs: Symbol(id: 3), rhs: [Symbol(id: 42), Symbol(id: 31)])
		grammar.addRule(lhs: Symbol(id: 3), rhs: [Symbol(id: 43), Symbol(id: 31)])
		grammar.addRule(lhs: Symbol(id: 3), rhs: [Symbol(id: 44)])
		grammar.addRule(lhs: Symbol(id: 4), rhs: [])
		grammar.addRule(lhs: Symbol(id: 4), rhs: [Symbol(id: 3)])
		grammar.addRule(lhs: Symbol(id: 4), rhs: [Symbol(id: 3), Symbol(id: 62), Symbol(id: 4)])
		grammar.addRule(lhs: Symbol(id: 5), rhs: [Symbol(id: 6), Symbol(id: 35), Symbol(id: 60), Symbol(id: 4), Symbol(id: 61)])
		grammar.addRule(lhs: Symbol(id: 5), rhs: [Symbol(id: 6)])
		grammar.addRule(lhs: Symbol(id: 6), rhs: [Symbol(id: 45), Symbol(id: 60), Symbol(id: 4), Symbol(id: 61), Symbol(id: 46), Symbol(id: 6)])
		grammar.addRule(lhs: Symbol(id: 6), rhs: [Symbol(id: 65), Symbol(id: 29), Symbol(id: 66), Symbol(id: 6)])
		grammar.addRule(lhs: Symbol(id: 6), rhs: [Symbol(id: 67), Symbol(id: 30), Symbol(id: 68), Symbol(id: 6)])
		grammar.addRule(lhs: Symbol(id: 6), rhs: [Symbol(id: 69), Symbol(id: 6), Symbol(id: 47), Symbol(id: 60), Symbol(id: 23), Symbol(id: 61)])
		grammar.addRule(lhs: Symbol(id: 7), rhs: [Symbol(id: 8), Symbol(id: 66), Symbol(id: 7)])
		grammar.addRule(lhs: Symbol(id: 7), rhs: [Symbol(id: 29), Symbol(id: 66), Symbol(id: 7)])
		grammar.addRule(lhs: Symbol(id: 7), rhs: [Symbol(id: 29), Symbol(id: 70), Symbol(id: 7)])
		grammar.addRule(lhs: Symbol(id: 8), rhs: [Symbol(id: 8), Symbol(id: 71), Symbol(id: 19)])
		grammar.addRule(lhs: Symbol(id: 8), rhs: [Symbol(id: 8), Symbol(id: 9)])
		grammar.addRule(lhs: Symbol(id: 9), rhs: [Symbol(id: 48), Symbol(id: 10), Symbol(id: 10), Symbol(id: 10)])
		grammar.addRule(lhs: Symbol(id: 9), rhs: [Symbol(id: 49), Symbol(id: 10), Symbol(id: 10), Symbol(id: 14)])
		grammar.addRule(lhs: Symbol(id: 9), rhs: [Symbol(id: 50), Symbol(id: 10), Symbol(id: 10), Symbol(id: 14)])
		grammar.addRule(lhs: Symbol(id: 9), rhs: [Symbol(id: 51), Symbol(id: 10), Symbol(id: 10)])
		grammar.addRule(lhs: Symbol(id: 9), rhs: [Symbol(id: 52), Symbol(id: 10), Symbol(id: 10), Symbol(id: 14)])
		grammar.addRule(lhs: Symbol(id: 9), rhs: [Symbol(id: 53), Symbol(id: 10), Symbol(id: 14)])
		grammar.addRule(lhs: Symbol(id: 9), rhs: [Symbol(id: 54), Symbol(id: 10), Symbol(id: 14)])
		grammar.addRule(lhs: Symbol(id: 9), rhs: [Symbol(id: 55), Symbol(id: 10), Symbol(id: 14)])
		grammar.addRule(lhs: Symbol(id: 9), rhs: [Symbol(id: 56), Symbol(id: 10), Symbol(id: 10), Symbol(id: 9)])
		grammar.addRule(lhs: Symbol(id: 9), rhs: [Symbol(id: 57), Symbol(id: 10), Symbol(id: 14)])
		grammar.addRule(lhs: Symbol(id: 9), rhs: [Symbol(id: 58), Symbol(id: 10), Symbol(id: 10), Symbol(id: 10), Symbol(id: 10), Symbol(id: 10), Symbol(id: 10)])
		grammar.addRule(lhs: Symbol(id: 10), rhs: [Symbol(id: 10), Symbol(id: 72)])
		grammar.addRule(lhs: Symbol(id: 10), rhs: [Symbol(id: 10), Symbol(id: 73)])
		grammar.addRule(lhs: Symbol(id: 11), rhs: [Symbol(id: 74), Symbol(id: 6), Symbol(id: 75), Symbol(id: 12), Symbol(id: 76)])
		grammar.addRule(lhs: Symbol(id: 11), rhs: [Symbol(id: 31)])
		grammar.addRule(lhs: Symbol(id: 11), rhs: [Symbol(id: 31), Symbol(id: 60), Symbol(id: 6), Symbol(id: 61)])
		grammar.addRule(lhs: Symbol(id: 11), rhs: [Symbol(id: 59)])
		grammar.addRule(lhs: Symbol(id: 11), rhs: [Symbol(id: 33)])
		grammar.addRule(lhs: Symbol(id: 6), rhs: [Symbol(id: 7)])
		grammar.addRule(lhs: Symbol(id: 7), rhs: [Symbol(id: 8)])
		grammar.addRule(lhs: Symbol(id: 8), rhs: [Symbol(id: 9)])
		grammar.addRule(lhs: Symbol(id: 9), rhs: [Symbol(id: 10)])
		grammar.addRule(lhs: Symbol(id: 10), rhs: [Symbol(id: 11)])
		grammar.addRule(lhs: Symbol(id: 11), rhs: [Symbol(id: 74), Symbol(id: 6), Symbol(id: 76)])
		grammar.addRule(lhs: Symbol(id: 12), rhs: [Symbol(id: 6)])
		grammar.addRule(lhs: Symbol(id: 12), rhs: [Symbol(id: 6), Symbol(id: 75), Symbol(id: 12)])
		grammar.addRule(lhs: Symbol(id: 13), rhs: [Symbol(id: 77)])
		grammar.addRule(lhs: Symbol(id: 13), rhs: [Symbol(id: 78)])
		grammar.addRule(lhs: Symbol(id: 14), rhs: [Symbol(id: 79), Symbol(id: 18), Symbol(id: 80)])
		grammar.addRule(lhs: Symbol(id: 15), rhs: [Symbol(id: 74), Symbol(id: 31), Symbol(id: 64), Symbol(id: 13), Symbol(id: 76)])
		grammar.addRule(lhs: Symbol(id: 16), rhs: [])
		grammar.addRule(lhs: Symbol(id: 16), rhs: [Symbol(id: 15), Symbol(id: 16)])
		grammar.addRule(lhs: Symbol(id: 17), rhs: [Symbol(id: 16), Symbol(id: 66), Symbol(id: 6)])
		grammar.addRule(lhs: Symbol(id: 18), rhs: [])
		grammar.addRule(lhs: Symbol(id: 18), rhs: [Symbol(id: 17)])
		grammar.addRule(lhs: Symbol(id: 18), rhs: [Symbol(id: 17), Symbol(id: 75), Symbol(id: 18)])
		grammar.addRule(lhs: Symbol(id: 19), rhs: [Symbol(id: 19), Symbol(id: 81), Symbol(id: 20)])
		grammar.addRule(lhs: Symbol(id: 20), rhs: [Symbol(id: 20), Symbol(id: 32), Symbol(id: 21)])
		grammar.addRule(lhs: Symbol(id: 21), rhs: [Symbol(id: 82), Symbol(id: 21)])
		grammar.addRule(lhs: Symbol(id: 21), rhs: [Symbol(id: 31)])
		grammar.addRule(lhs: Symbol(id: 21), rhs: [Symbol(id: 13)])
		grammar.addRule(lhs: Symbol(id: 19), rhs: [Symbol(id: 20)])
		grammar.addRule(lhs: Symbol(id: 20), rhs: [Symbol(id: 21)])
		grammar.addRule(lhs: Symbol(id: 21), rhs: [Symbol(id: 74), Symbol(id: 19), Symbol(id: 76)])
		grammar.addRule(lhs: Symbol(id: 22), rhs: [Symbol(id: 31), Symbol(id: 30), Symbol(id: 66), Symbol(id: 5)])
		grammar.addRule(lhs: Symbol(id: 22), rhs: [Symbol(id: 31), Symbol(id: 30), Symbol(id: 71), Symbol(id: 30), Symbol(id: 66), Symbol(id: 5)])
		grammar.addRule(lhs: Symbol(id: 23), rhs: [])
		grammar.addRule(lhs: Symbol(id: 23), rhs: [Symbol(id: 22)])
		grammar.addRule(lhs: Symbol(id: 23), rhs: [Symbol(id: 22), Symbol(id: 62), Symbol(id: 23)])
		grammar.addRule(lhs: Symbol(id: 24), rhs: [Symbol(id: 31), Symbol(id: 27)])
		grammar.addRule(lhs: Symbol(id: 24), rhs: [Symbol(id: 31), Symbol(id: 27), Symbol(id: 67), Symbol(id: 30), Symbol(id: 68), Symbol(id: 14)])
		grammar.addRule(lhs: Symbol(id: 25), rhs: [])
		grammar.addRule(lhs: Symbol(id: 25), rhs: [Symbol(id: 24)])
		grammar.addRule(lhs: Symbol(id: 25), rhs: [Symbol(id: 24), Symbol(id: 83), Symbol(id: 25)])
		grammar.addRule(lhs: Symbol(id: 26), rhs: [Symbol(id: 74), Symbol(id: 31), Symbol(id: 30), Symbol(id: 63), Symbol(id: 6), Symbol(id: 76)])
		grammar.addRule(lhs: Symbol(id: 27), rhs: [])
		grammar.addRule(lhs: Symbol(id: 27), rhs: [Symbol(id: 26), Symbol(id: 27)])
		grammar.addRule(lhs: Symbol(id: 28), rhs: [Symbol(id: 74), Symbol(id: 6), Symbol(id: 63), Symbol(id: 6), Symbol(id: 76)])
		grammar.addRule(lhs: Symbol(id: 29), rhs: [Symbol(id: 28)])
		grammar.addRule(lhs: Symbol(id: 29), rhs: [Symbol(id: 28), Symbol(id: 29)])
		grammar.addRule(lhs: Symbol(id: 30), rhs: [])
		grammar.addRule(lhs: Symbol(id: 30), rhs: [Symbol(id: 31), Symbol(id: 30)])
	
	}
	
	
	let cats: [Int : String] = [
		22 : "Branch",
		3 : "Decl",
		13 : "Dir",
		6 : "Exp",
		5 : "ExpWhere",
		15 : "Face",
		19 : "Formula",
		1 : "Imp",
		24 : "Label",
		0 : "Module",
		28 : "PTele",
		17 : "Side",
		14 : "System",
		26 : "Tele",
		31 : "AIdent",
		32 : "CIdent",
		33 : "HoleIdent",
		23 : "[Branch]",
		4 : "[Decl]",
		12 : "[Exp]",
		16 : "[Face]",
		2 : "[Imp]",
		25 : "[Label]",
		29 : "[PTele]",
		18 : "[Side]",
		27 : "[Tele]",
		30 : "[AIdent]",
		7 : "Exp1",
		8 : "Exp2",
		9 : "Exp3",
		10 : "Exp4",
		11 : "Exp5",
		20 : "Formula1",
		21 : "Formula2",
	]
	
	let terminals: [Int : String] = [
		74 : "(",
		76 : ")",
		70 : "*",
		75 : ",",
		82 : "-",
		66 : "->",
		72 : ".1",
		73 : ".2",
		77 : "0",
		78 : "1",
		63 : ":",
		62 : ";",
		67 : "<",
		64 : "=",
		68 : ">",
		71 : "@",
		53 : "Glue",
		56 : "Id",
		48 : "PathP",
		59 : "U",
		79 : "[",
		65 : "\\",
		81 : "\\/",
		80 : "]",
		49 : "comp",
		37 : "data",
		52 : "fill",
		54 : "glue",
		50 : "hComp",
		38 : "hdata",
		57 : "idC",
		58 : "idJ",
		36 : "import",
		46 : "in",
		45 : "let",
		34 : "module",
		41 : "mutual",
		42 : "opaque",
		39 : "split",
		69 : "split@",
		43 : "transparent",
		44 : "transparent_all",
		51 : "transport",
		40 : "undefined",
		55 : "unglue",
		35 : "where",
		47 : "with",
		60 : "{",
		83 : "|",
		61 : "}",
	]


	public func runModuleParser(input: String) throws -> Forest<Int16> {
		var recognizer: Recognizer<Int16> = Recognizer(PreprocessedGrammar(grammar))
		var tokens: [Int16] = []
		try lexer.tokenize(input, onFound: {(token) in tokens.append(token)})
		for (i,s) in tokens.enumerated() {
			recognizer.discover(Symbol(id: s), startingAt: UInt32(i))
		}
		return recognizer.forest
	}

}
