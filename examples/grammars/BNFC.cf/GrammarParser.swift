

import Lotsawa
import CitronLexerModule
import Foundation


let lexer: CitronLexer<Int16> = CitronLexer(rules: [
	LexingRule.regexPattern("[A-Za-z]_|[0-9]|[A-Za-z]*", {_ in -1})
])

var grammar: DefaultGrammar = Grammar(recognizing: 0)

grammar.addRule(lhs: 0, rhs: [1])
grammar.addRule(lhs: 1, rhs: [])
grammar.addRule(lhs: 1, rhs: [2])
grammar.addRule(lhs: 1, rhs: [2,-1,1])
grammar.addRule(lhs: 1, rhs: [-1,1])
grammar.addRule(lhs: 2, rhs: [7,-1,5,-1,4])
grammar.addRule(lhs: 3, rhs: [-1])
grammar.addRule(lhs: 3, rhs: [5])
grammar.addRule(lhs: 4, rhs: [])
grammar.addRule(lhs: 4, rhs: [3,4])
grammar.addRule(lhs: 5, rhs: [-1,5,-1])
grammar.addRule(lhs: 5, rhs: [-1])
grammar.addRule(lhs: 6, rhs: [])
grammar.addRule(lhs: 6, rhs: [5])
grammar.addRule(lhs: 6, rhs: [5,-1,6])
grammar.addRule(lhs: 7, rhs: [-1])
grammar.addRule(lhs: 7, rhs: [-1])
grammar.addRule(lhs: 7, rhs: [-1,-1])
grammar.addRule(lhs: 7, rhs: [-1,-1,-1])
grammar.addRule(lhs: 7, rhs: [-1,-1,-1,-1,-1])
grammar.addRule(lhs: 2, rhs: [-1,-1])
grammar.addRule(lhs: 2, rhs: [-1,-1,-1])
grammar.addRule(lhs: 2, rhs: [-1,7,-1,5,-1,4])
grammar.addRule(lhs: 2, rhs: [-1,-1,20])
grammar.addRule(lhs: 2, rhs: [-1,-1,-1,20])
grammar.addRule(lhs: 2, rhs: [-1,6])
grammar.addRule(lhs: 2, rhs: [-1,19,5,-1])
grammar.addRule(lhs: 2, rhs: [-1,19,5,-1])
grammar.addRule(lhs: 2, rhs: [-1,5,-1,-1,10,19])
grammar.addRule(lhs: 2, rhs: [-1,-1,-1])
grammar.addRule(lhs: 2, rhs: [-1,-1,-1,18])
grammar.addRule(lhs: 2, rhs: [-1,-1,9,-1,12])
grammar.addRule(lhs: 8, rhs: [-1])
grammar.addRule(lhs: 9, rhs: [])
grammar.addRule(lhs: 9, rhs: [8,9])
grammar.addRule(lhs: 10, rhs: [])
grammar.addRule(lhs: 10, rhs: [-1,-1])
grammar.addRule(lhs: 10, rhs: [-1,-1])
grammar.addRule(lhs: 2, rhs: [-1,11])
grammar.addRule(lhs: 2, rhs: [-1,-1,11])
grammar.addRule(lhs: 2, rhs: [-1,-1])
grammar.addRule(lhs: 11, rhs: [-1])
grammar.addRule(lhs: 11, rhs: [-1,-1,11])
grammar.addRule(lhs: 12, rhs: [13,-1,12])
grammar.addRule(lhs: 13, rhs: [-1,16])
grammar.addRule(lhs: 14, rhs: [-1])
grammar.addRule(lhs: 14, rhs: [-1])
grammar.addRule(lhs: 14, rhs: [-1])
grammar.addRule(lhs: 14, rhs: [-1])
grammar.addRule(lhs: 14, rhs: [-1])
grammar.addRule(lhs: 14, rhs: [-1,15,-1])
grammar.addRule(lhs: 12, rhs: [13])
grammar.addRule(lhs: 13, rhs: [14])
grammar.addRule(lhs: 14, rhs: [-1,12,-1])
grammar.addRule(lhs: 15, rhs: [])
grammar.addRule(lhs: 15, rhs: [12])
grammar.addRule(lhs: 15, rhs: [12,-1,15])
grammar.addRule(lhs: 16, rhs: [14])
grammar.addRule(lhs: 16, rhs: [14,16])
grammar.addRule(lhs: 17, rhs: [4])
grammar.addRule(lhs: 18, rhs: [17])
grammar.addRule(lhs: 18, rhs: [17,-1,18])
grammar.addRule(lhs: 19, rhs: [-1])
grammar.addRule(lhs: 19, rhs: [])
grammar.addRule(lhs: 20, rhs: [20,-1,21])
grammar.addRule(lhs: 21, rhs: [21,-1,22])
grammar.addRule(lhs: 22, rhs: [22,23])
grammar.addRule(lhs: 23, rhs: [23,-1])
grammar.addRule(lhs: 23, rhs: [23,-1])
grammar.addRule(lhs: 23, rhs: [23,-1])
grammar.addRule(lhs: 23, rhs: [-1])
grammar.addRule(lhs: 23, rhs: [-1])
grammar.addRule(lhs: 23, rhs: [-1,-1,-1])
grammar.addRule(lhs: 23, rhs: [-1,-1,-1])
grammar.addRule(lhs: 23, rhs: [-1])
grammar.addRule(lhs: 23, rhs: [-1])
grammar.addRule(lhs: 23, rhs: [-1])
grammar.addRule(lhs: 23, rhs: [-1])
grammar.addRule(lhs: 23, rhs: [-1])
grammar.addRule(lhs: 20, rhs: [21])
grammar.addRule(lhs: 21, rhs: [22])
grammar.addRule(lhs: 22, rhs: [23])
grammar.addRule(lhs: 23, rhs: [-1,20,-1])


public func runGrammarParser(input: String) throws -> Forest<Int16> {
	let recognizer: Recognizer<Int16> = Recognizer(PreprocessedGrammar(grammar))
	var tokens: [Int16] = []
	lexer.tokenize(input, onFound: {(token) in tokens.append(token)})
	for (i,s) in tokens.enumerated() {
		recognizer.discover(s, startingAt: i)
	}
	return recognizer.forest
}

